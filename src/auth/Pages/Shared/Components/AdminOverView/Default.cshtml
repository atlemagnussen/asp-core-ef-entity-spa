@model Models.AdminViewModel

<h4>Data Protection test</h4>
<p>
    <b>Input:</b> @Model.ProtectInput<br>
    <b>Protected:</b> @Model.ProtectedInput<br>
    <b>Unprotected:</b> @Model.UnprotectedInput
</p>
<h4>WebClient</h4>
@if (Model.WebClient != null)
{
    <p>
        <span style="font-weight: bold">AccessTokenLifetime</span>
        @Model.WebClient.AccessTokenLifetime<span> seconds</span>
    </p>
}
<h4>Azure Key Vault keys</h4>
@if (Model.SigningKeys.CacheExpiring.HasValue)
{
    <p>Cache expiring @Model.SigningKeys.CacheExpiring.Value</p>
}
else
{
    <p>Not cached</p>
}
<h5>SigningKeys</h5>
<div class="key previous">
    <h6>Previous</h6>
    @await Component.InvokeAsync("SigningKey", new { vm = @Model.SigningKeys.Previous })
</div>
<div class="key current">
    <h6>Current</h6>
    @await Component.InvokeAsync("SigningKey", new { vm = @Model.SigningKeys.Current })
</div>
<div class="key future">
    <h6>Future</h6>
    @await Component.InvokeAsync("SigningKey", new { vm = @Model.SigningKeys.Future })
</div>

<p><a href=".well-known/openid-configuration">Discovery document</a></p>

<h3>config</h3>
<h4>Azure Key Vault values</h4>
<p>ClientId: @Model.AzureAdClientId<p>
<p>
    <span style="font-weight: bold">AuthDb</span>
    <span>@Model.AuthConnectionString</span>
</p>
<p>
    <span style="font-weight: bold">BankDatabase</span>
    <span>@Model.BankConnectionString</span>
</p>